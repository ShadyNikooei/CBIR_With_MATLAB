function [feature_q] = CBIR_dataBase (dataset_folder)
% This a function can extract features of images in a dataset and save them
% in an structure
% Input is the directory address from dataSet
% Output is an structure of features that extract from images in dataSet

close all
clear 
clc

dataSet_folder = dataset_folder;
imageFile = dir(fullfile(dataSet_folder,'*.jpg')); % sort file in folder
numImage = length(imageFile); % number of files


fetureMtx(1,numImage) = struct('name','', 'features', []);


for i=1:numImage
    
   % set matrix for fetures
   features = zeros(7,16);
   
   fetureMtx(i).name = imageFile(i).name;
   img = imread(fullfile(dataSet_folder, imageFile(i).name));
   img = rgb2gray(img);

   [rows, colns, ~] = size(img);
   block_rows = floor(rows/4);
   block_colns = floor(colns/4);

   for j=0:3
       for k=0:3

           % set block
           start_row = j*block_rows+1;
           stop_row = (j+1)*block_rows;
           start_cln = k*block_colns+1;
           stop_cln = (k+1)*block_colns;

           part_img = img(start_row:stop_row,start_cln:stop_cln);
           
           % find coln
           part_num = j*4 + k + 1;
           
           % extract features
           features(1,part_num) = mean2(part_img); % mean2 -> row:1
           features(2,part_num)= std2(part_img);  % std2 -> row:2
           features(3,part_num) = min(part_img(:)); % minIntensity -> row:3
           features(4,part_num) = max(part_img(:)); % maxIntensity -> row:4
           features(5,part_num) = sum(part_img(:)); % area -> row:5
           
           % morphological operations
           part_img = imbinarize(part_img);
           part_img = ~part_img;
           part_img = imfill(part_img,"holes");
           part_img = bwareaopen(part_img,10);
           se = strel('disk', 10);
           part_img = imclose(part_img,se);
           
            % Region properties: centroid
           states = regionprops(part_img,'Centroid');
           if ~isempty(states)
               allCentroids = cat(1, states.Centroid); % Collect all centroids
               x = mean(allCentroids(:,1));            % Mean X
               y = mean(allCentroids(:,2));            % Mean Y
           else
               x = 0;
               y = 0;
           end
           features(6,part_num) = x; % Centroid X
           features(7,part_num) = y; % Centroid Y;
       end
   end
   % Save features into struct
   fetureMtx(i).features = features;
end




